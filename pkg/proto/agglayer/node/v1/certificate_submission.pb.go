// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: agglayer/node/v1/certificate_submission.proto

package v1

import (
	v1 "github.com/gateway-fm/agg-certificate-proxy/pkg/proto/agglayer/node/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The kind of error that occurred and that are reported by the service.
type SubmitCertificateErrorKind int32

const (
	// Unspecified error.
	SubmitCertificateErrorKind_SUBMIT_CERTIFICATE_ERROR_KIND_UNSPECIFIED SubmitCertificateErrorKind = 0
	// Missing field.
	SubmitCertificateErrorKind_SUBMIT_CERTIFICATE_ERROR_KIND_MISSING_FIELD SubmitCertificateErrorKind = 1
	// Invalid data.
	SubmitCertificateErrorKind_SUBMIT_CERTIFICATE_ERROR_KIND_INVALID_DATA SubmitCertificateErrorKind = 2
	// The signature verification failed.
	SubmitCertificateErrorKind_SUBMIT_CERTIFICATE_ERROR_KIND_SIGNATURE_VERIFICATION SubmitCertificateErrorKind = 3
	// Unable to replace pending certificate.
	SubmitCertificateErrorKind_SUBMIT_CERTIFICATE_ERROR_KIND_UNABLE_TO_REPLACE_PENDING_CERTIFICATE SubmitCertificateErrorKind = 4
)

// Enum value maps for SubmitCertificateErrorKind.
var (
	SubmitCertificateErrorKind_name = map[int32]string{
		0: "SUBMIT_CERTIFICATE_ERROR_KIND_UNSPECIFIED",
		1: "SUBMIT_CERTIFICATE_ERROR_KIND_MISSING_FIELD",
		2: "SUBMIT_CERTIFICATE_ERROR_KIND_INVALID_DATA",
		3: "SUBMIT_CERTIFICATE_ERROR_KIND_SIGNATURE_VERIFICATION",
		4: "SUBMIT_CERTIFICATE_ERROR_KIND_UNABLE_TO_REPLACE_PENDING_CERTIFICATE",
	}
	SubmitCertificateErrorKind_value = map[string]int32{
		"SUBMIT_CERTIFICATE_ERROR_KIND_UNSPECIFIED":                           0,
		"SUBMIT_CERTIFICATE_ERROR_KIND_MISSING_FIELD":                         1,
		"SUBMIT_CERTIFICATE_ERROR_KIND_INVALID_DATA":                          2,
		"SUBMIT_CERTIFICATE_ERROR_KIND_SIGNATURE_VERIFICATION":                3,
		"SUBMIT_CERTIFICATE_ERROR_KIND_UNABLE_TO_REPLACE_PENDING_CERTIFICATE": 4,
	}
)

func (x SubmitCertificateErrorKind) Enum() *SubmitCertificateErrorKind {
	p := new(SubmitCertificateErrorKind)
	*p = x
	return p
}

func (x SubmitCertificateErrorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitCertificateErrorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_agglayer_node_v1_certificate_submission_proto_enumTypes[0].Descriptor()
}

func (SubmitCertificateErrorKind) Type() protoreflect.EnumType {
	return &file_agglayer_node_v1_certificate_submission_proto_enumTypes[0]
}

func (x SubmitCertificateErrorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitCertificateErrorKind.Descriptor instead.
func (SubmitCertificateErrorKind) EnumDescriptor() ([]byte, []int) {
	return file_agglayer_node_v1_certificate_submission_proto_rawDescGZIP(), []int{0}
}

// Type used to submit a certificate.
type SubmitCertificateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The certificate to submit.
	Certificate   *v1.Certificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitCertificateRequest) Reset() {
	*x = SubmitCertificateRequest{}
	mi := &file_agglayer_node_v1_certificate_submission_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCertificateRequest) ProtoMessage() {}

func (x *SubmitCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agglayer_node_v1_certificate_submission_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCertificateRequest.ProtoReflect.Descriptor instead.
func (*SubmitCertificateRequest) Descriptor() ([]byte, []int) {
	return file_agglayer_node_v1_certificate_submission_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitCertificateRequest) GetCertificate() *v1.Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// Type used as response to a certificate submission.
type SubmitCertificateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The certificate id of the submitted certificate.
	CertificateId *v1.CertificateId `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitCertificateResponse) Reset() {
	*x = SubmitCertificateResponse{}
	mi := &file_agglayer_node_v1_certificate_submission_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCertificateResponse) ProtoMessage() {}

func (x *SubmitCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agglayer_node_v1_certificate_submission_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCertificateResponse.ProtoReflect.Descriptor instead.
func (*SubmitCertificateResponse) Descriptor() ([]byte, []int) {
	return file_agglayer_node_v1_certificate_submission_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitCertificateResponse) GetCertificateId() *v1.CertificateId {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

var File_agglayer_node_v1_certificate_submission_proto protoreflect.FileDescriptor

const file_agglayer_node_v1_certificate_submission_proto_rawDesc = "" +
	"\n" +
	"-agglayer/node/v1/certificate_submission.proto\x12\x10agglayer.node.v1\x1a(agglayer/node/types/v1/certificate.proto\x1a+agglayer/node/types/v1/certificate_id.proto\"a\n" +
	"\x18SubmitCertificateRequest\x12E\n" +
	"\vcertificate\x18\x01 \x01(\v2#.agglayer.node.types.v1.CertificateR\vcertificate\"i\n" +
	"\x19SubmitCertificateResponse\x12L\n" +
	"\x0ecertificate_id\x18\x01 \x01(\v2%.agglayer.node.types.v1.CertificateIdR\rcertificateId*\xaf\x02\n" +
	"\x1aSubmitCertificateErrorKind\x12-\n" +
	")SUBMIT_CERTIFICATE_ERROR_KIND_UNSPECIFIED\x10\x00\x12/\n" +
	"+SUBMIT_CERTIFICATE_ERROR_KIND_MISSING_FIELD\x10\x01\x12.\n" +
	"*SUBMIT_CERTIFICATE_ERROR_KIND_INVALID_DATA\x10\x02\x128\n" +
	"4SUBMIT_CERTIFICATE_ERROR_KIND_SIGNATURE_VERIFICATION\x10\x03\x12G\n" +
	"CSUBMIT_CERTIFICATE_ERROR_KIND_UNABLE_TO_REPLACE_PENDING_CERTIFICATE\x10\x042\x8c\x01\n" +
	"\x1cCertificateSubmissionService\x12l\n" +
	"\x11SubmitCertificate\x12*.agglayer.node.v1.SubmitCertificateRequest\x1a+.agglayer.node.v1.SubmitCertificateResponseb\x06proto3"

var (
	file_agglayer_node_v1_certificate_submission_proto_rawDescOnce sync.Once
	file_agglayer_node_v1_certificate_submission_proto_rawDescData []byte
)

func file_agglayer_node_v1_certificate_submission_proto_rawDescGZIP() []byte {
	file_agglayer_node_v1_certificate_submission_proto_rawDescOnce.Do(func() {
		file_agglayer_node_v1_certificate_submission_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_agglayer_node_v1_certificate_submission_proto_rawDesc), len(file_agglayer_node_v1_certificate_submission_proto_rawDesc)))
	})
	return file_agglayer_node_v1_certificate_submission_proto_rawDescData
}

var file_agglayer_node_v1_certificate_submission_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_agglayer_node_v1_certificate_submission_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_agglayer_node_v1_certificate_submission_proto_goTypes = []any{
	(SubmitCertificateErrorKind)(0),   // 0: agglayer.node.v1.SubmitCertificateErrorKind
	(*SubmitCertificateRequest)(nil),  // 1: agglayer.node.v1.SubmitCertificateRequest
	(*SubmitCertificateResponse)(nil), // 2: agglayer.node.v1.SubmitCertificateResponse
	(*v1.Certificate)(nil),            // 3: agglayer.node.types.v1.Certificate
	(*v1.CertificateId)(nil),          // 4: agglayer.node.types.v1.CertificateId
}
var file_agglayer_node_v1_certificate_submission_proto_depIdxs = []int32{
	3, // 0: agglayer.node.v1.SubmitCertificateRequest.certificate:type_name -> agglayer.node.types.v1.Certificate
	4, // 1: agglayer.node.v1.SubmitCertificateResponse.certificate_id:type_name -> agglayer.node.types.v1.CertificateId
	1, // 2: agglayer.node.v1.CertificateSubmissionService.SubmitCertificate:input_type -> agglayer.node.v1.SubmitCertificateRequest
	2, // 3: agglayer.node.v1.CertificateSubmissionService.SubmitCertificate:output_type -> agglayer.node.v1.SubmitCertificateResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_agglayer_node_v1_certificate_submission_proto_init() }
func file_agglayer_node_v1_certificate_submission_proto_init() {
	if File_agglayer_node_v1_certificate_submission_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_agglayer_node_v1_certificate_submission_proto_rawDesc), len(file_agglayer_node_v1_certificate_submission_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agglayer_node_v1_certificate_submission_proto_goTypes,
		DependencyIndexes: file_agglayer_node_v1_certificate_submission_proto_depIdxs,
		EnumInfos:         file_agglayer_node_v1_certificate_submission_proto_enumTypes,
		MessageInfos:      file_agglayer_node_v1_certificate_submission_proto_msgTypes,
	}.Build()
	File_agglayer_node_v1_certificate_submission_proto = out.File
	file_agglayer_node_v1_certificate_submission_proto_goTypes = nil
	file_agglayer_node_v1_certificate_submission_proto_depIdxs = nil
}
